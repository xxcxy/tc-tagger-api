openapi: 3.0.3
info:
  description: >
    REST API for Topcoder Taggers.


    ### Pagination
      Requests that return multiple items will be paginated to 20 items by default. You can specify
      further pages with the `page` parameter. You can also set a custom page
      size up to 100 with the `perPage` parameter.

      Pagination response data is included in http headers. By Default, the response header contains links with `next`, `last`, `first`, `prev` resource links.
  version: 5.0.0
  title: Topcoder Taggers REST API
  termsOfService: http://topcoder.com/terms/
  contact:
    url: http://www.topcoder.com/support
    email: support@topcoder.com
tags:
  - name: Health
    description: Everything about application health.
  - name: Challenge tags
    description: Everything about challenge tags.
  - name: Member profiles
    description: Everything about member profiles.
  - name: Member skills
    description: Everything about member skills.
paths:
  /v5/tagger/health:
    get:
      operationId: v5_tc_tagger_health_retrieve
      description: Get health status of the app.
      tags:
      - Health
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  checksRun:
                    type: integer
                required:
                  - checksRun
        '503':
          $ref: "#/components/responses/ServiceUnavailableError"
  /v5/tagger/challenge-tags:
    get:
      operationId: v5_tc_tagger_retrieve
      description: >
        Get all tags. Link headers are sent back and they have rel set to
        prev, next, first, last and contain the relevant URL.


        Resulted collection of tags can be filtered using filter parameters `type`, `url`, `memberId`, `challengeId` (all filter parameters are optional and combined by the logical operation `AND`).

      parameters:
      - in: query
        name: challengeId
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: integer
      - in: query
        name: perPage
        schema:
          type: integer
      - in: query
        name: tag
        schema:
          type: string
      tags:
      - Challenge tags
      responses:
        '200':
          description: OK - the request was successful, the tags resource are returned.
          headers:
            X-Next-Page:
              description: The index of the next page
              schema:
                type: integer
            X-Page:
              description: The index of the current page (starting at 1)
              schema:
                type: integer
            X-Per-Page:
              description: The number of items to list per page
              schema:
                type: integer
            X-Prev-Page:
              description: The index of the previous page
              schema:
                type: integer
            X-Total:
              description: The total number of items
              schema:
                type: integer
            X-Total-Pages:
              description: The total number of pages
              schema:
                type: integer
            Link:
              description: Pagination link header.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChallengeDetails'
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      operationId: v5_tc_tagger_tags_update
      description: > 
        Contains logic to update challenge tags based on challenge ids
        
        
        **Authorization:** Update tags is accessible by scopes `write:challenges`, `all:challenges`.

      parameters:
      - in: query
        name: status
        schema:
          type: string
          enum: [open, completed]
        description: Filter challenge by status.
      - in: query
        name: stream
        schema:
          type: boolean
        description: If "stream=true", then return response as a stream
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                challengeId:
                  type: array
                  items:
                    type: string
      tags:
      - Challenge tags
      security:
      - Bearer: []
      responses:
        '200':
          description: Successful record count
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message:
                      type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v5/tagger/member-profiles:
    get:
      operationId: v5_member_tag_profile_get_member_profile_retrieve
      description: >
        Get all member profiles. Link headers are sent back and they have rel set to
        prev, next, first, last and contain the relevant URL.


        Resulted collection of member profiles can be filtered using filter parameters `handles`, `skill`, `startDate`, `endDate` (all filter parameters are optional and combined by the logical operation `AND`).

      parameters:
      - in: query
        name: handles
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: integer
      - in: query
        name: perPage
        schema:
          type: integer
      - in: query
        name: skill
        schema:
          type: string
      - in: query
        name: startDate
        schema:
          type: string
          format: date-time
      - in: query
        name: endDate
        schema:
          type: string
          format: date-time
      tags:
      - Member profiles
      responses:
        '200':
          description: OK - the request was successful, the member profiles resource are returned.
          headers:
            X-Next-Page:
              description: The index of the next page
              schema:
                type: integer
            X-Page:
              description: The index of the current page (starting at 1)
              schema:
                type: integer
            X-Per-Page:
              description: The number of items to list per page
              schema:
                type: integer
            X-Prev-Page:
              description: The index of the previous page
              schema:
                type: integer
            X-Total:
              description: The total number of items
              schema:
                type: integer
            X-Total-Pages:
              description: The total number of pages
              schema:
                type: integer
            Link:
              description: Pagination link header.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberProfiles'
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      operationId: v5_member_tag_profile_update_member_profile_create
      description: > 
        Contains logic to update member skills based on challenge id
        
        
        **Authorization:** Update tags is accessible by scopes `write:challenges`, `all:challenges`.

      parameters:
      - in: query
        name: challengeId
        schema:
          type: string
          format: uuid
      - in: query
        name: memberHandle
        schema:
          type: string
      - in: query
        name: startDate
        schema:
          type: string
          format: date-time
        description: Filter by updated date (lower bound of date range)
      - in: query
        name: endDate
        schema:
          type: string
          format: date-time
        description: Filter by updated date (upper bound of date range)
      - in: query
        name: stream
        schema:
          type: boolean
        description: If "stream=true", then return response as a stream
      tags:
      - Member profiles
      security:
      - Bearer: []
      responses:
        '200':
          description: Successful record count
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message:
                      type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /v5/tagger/member-skills:
    get:
      operationId: v5_member_tag_profile_get_processed_member_profile_retrieve
      description: >
        Get all member skills. Link headers are sent back and they have rel set to
        prev, next, first, last and contain the relevant URL.


        Resulted collection of member profiles can be filtered using filter parameters `handles`, `skill`, `startDate`, `endDate` (all filter parameters are optional and combined by the logical operation `AND`).

      parameters:
      - in: query
        name: handles
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: integer
      - in: query
        name: perPage
        schema:
          type: integer
      - in: query
        name: skill
        schema:
          type: string
      - in: query
        name: startDate
        schema:
          type: string
          format: date-time
      - in: query
        name: endDate
        schema:
          type: string
          format: date-time
      tags:
      - Member skills
      responses:
        '200':
          description: OK - the request was successful, the member skills resource are returned.
          headers:
            X-Next-Page:
              description: The index of the next page
              schema:
                type: integer
            X-Page:
              description: The index of the current page (starting at 1)
              schema:
                type: integer
            X-Per-Page:
              description: The number of items to list per page
              schema:
                type: integer
            X-Prev-Page:
              description: The index of the previous page
              schema:
                type: integer
            X-Total:
              description: The total number of items
              schema:
                type: integer
            X-Total-Pages:
              description: The total number of pages
              schema:
                type: integer
            Link:
              description: Pagination link header.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberSkills'
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
    

components:
  schemas:
    ChallengeDetails:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        track:
          type: string
        appealsEndDate:
          type: string
          format: date-time
        tags:
          type: array
          readOnly: true
          items:
            type: string
        outputTags:
          type: array
          readOnly: true
          items:
            type: string
        winners:
          type: array
          items:
            type: object
            properties:
              handle:
                type: string
              placement:
                type: string
              userId:
                type: string
          readOnly: true
    MemberProfiles:
      type: object
      additionalProperties:
        type: array
        items:
          type: object
          properties:
            challengeId:
              type: string
            timestamp:
              type: string
              format: date-time
    MemberSkills:
      type: object
      additionalProperties:
        type: array
        items:
          type: object
          properties:
            skill:
              type: string
            skillConfidence:
              type: number
  responses:
    Unauthorized:
      description: Unauthorized error.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: The unauthorized error message.
                example: Unable to authenticate the user.
    NotFound:
      description: Not found error.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: The not found error message.
                example: A resource with the name could not be found.
    ServerError:
      description: Server error.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: The server error message.
                example: Something went wrong while processing your request. We’re sorry for
                  the trouble. We’ve been notified of the error and will correct it as
                  soon as possible. Please try your request again in a moment.
    BadRequest:
      description: Bad request error.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: The bad request error message.
                example: Invalid input.
    Forbidden:
      description: Permission error.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: The forbidden error message.
                example: You are not allowed to access the request.
    ServiceUnavailableError:
      description: Service unavailable error.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: The error message
                example: Service unavailable error
  securitySchemes:
    Bearer:
      type: apiKey
      in: header
      name: Authorization
